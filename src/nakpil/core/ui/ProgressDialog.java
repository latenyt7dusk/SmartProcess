/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nakpil.core.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.LineBorder;
import nakpil.proccess.Fetch2316Process;
import nakpil.proccess.Form2316Process;

/**
 *
 * @author HERU
 */
public class ProgressDialog {

    private static final Dimension ScreenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private static JFrame dialog;
    private static ProgressPanel PrPanel;
    private static ProgressTitleBar TrPanel;
    private static Thread TRD;
    private static Object ProcessObj;

    private JProgressBar jProgressBar1 = new JProgressBar();
    private JLabel jLabel1 = new JLabel();
    private JScrollPane jScrollPane1 = new JScrollPane();
    private JTextArea jTextArea1 = new JTextArea();
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;

    public void setProcessObject(Object proc) {
        ProcessObj = proc;
    }

    public final JProgressBar getProgressBar() {
        return jProgressBar1;
    }

    public void printResult(String s) {
        jTextArea1.append(s+"\n");
    }

    public void start() throws InterruptedException {
        if (TRD == null) {
            initComponents();
            if (ProcessObj instanceof Form2316Process) {
                TRD = new Thread((Form2316Process) ProcessObj);
                TRD.start();
                TRD.join();
            }else if(ProcessObj instanceof Fetch2316Process){
                TRD = new Thread((Fetch2316Process) ProcessObj);
                
                TRD.start();
                TRD.join();
            }
        }
    }

    public void stop() {
        if (TRD != null) {
            TRD.stop();
            TRD = null;
        }
        if (dialog != null) {
            dialog.dispose();
            dialog = null;
        }
    }

    public void initComponents() {
        try {
            
            dialog = new JFrame();
            JPanel Container = new JPanel();
            Container.setLayout(new BorderLayout());

            PrPanel = new ProgressPanel();
            TrPanel = new ProgressTitleBar("Processing");
            PrPanel.setBackground(Color.WHITE);
            Container.add(TrPanel, BorderLayout.NORTH);
            Container.add(PrPanel, BorderLayout.CENTER);
            Container.setBorder(new LineBorder(new Color(51, 153, 255), 1));

            dialog.setUndecorated(true);
            dialog.setAlwaysOnTop(true);
            dialog.setMinimumSize(new Dimension(484, 72));
            dialog.getContentPane().add(Container);
            dialog.pack();
            dialog.setLocation((ScreenSize.width >> 1) - (dialog.getWidth() >> 1), (ScreenSize.height >> 1) - (dialog.getHeight() >> 1));
            dialog.show();
        } catch (Exception er) {
            Logger.getLogger(ProgressDialog.class.getName()).log(Level.SEVERE, null, er);
        }
    }

    private class ProgressPanel extends javax.swing.JPanel {

        /**
         * Creates new form ui
         */
        public ProgressPanel() {
            initComponents();
        }

        

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents() {

            bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

            jTextArea1.setEditable(false);
            jTextArea1.setColumns(20);
            jTextArea1.setLineWrap(true);
            jTextArea1.setRows(5);
            jScrollPane1.setViewportView(jTextArea1);
            jTextArea1.setBackground(Color.WHITE);
            jTextArea1.setForeground(Color.BLACK);

            jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

            org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jProgressBar1, org.jdesktop.beansbinding.ELProperty.create("${string}"), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("text"));
            bindingGroup.addBinding(binding);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                            .addGap(5, 5, 5))
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(jLabel1)
                            .addGap(0, 0, 0)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, Short.MAX_VALUE)
                            .addGap(5, 5, 5))
            );

            bindingGroup.bind();
        }// </editor-fold>                        

    }

    private static class ProgressTitleBar extends JPanel {

        private static final JLabel title = new JLabel();
        private static final JButton button = new JButton("STOP");
        private static int xMouse;
        private static int yMouse;

        public ProgressTitleBar(String s) {
            title.setText(s);
            title.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 1, 4));
            button.addActionListener(new stop());
            button.setContentAreaFilled(false);
            button.setBorderPainted(false);
            button.setFocusPainted(false);
            button.setFocusable(false);
            button.setCursor(new Cursor(Cursor.HAND_CURSOR));
            button.setMargin(new Insets(1, 2, 1, 4));
            this.setBackground(new Color(51, 153, 255));
            this.setLayout(new BorderLayout());
            this.add(title, BorderLayout.CENTER);
            this.add(button, BorderLayout.EAST);
            this.setPreferredSize(new Dimension(484, 22));

            addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    xMouse = evt.getX();
                    yMouse = evt.getY();
                }
            });
            addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                @Override
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    int x = evt.getXOnScreen();
                    int y = evt.getYOnScreen();
                    dialog.setLocation(x - xMouse, y - yMouse);
                }
            });

        }

        private static class stop implements ActionListener {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!dialog.isVisible()) {
                    return;
                }
                if (e.getSource() == button) {
                    if (TRD != null) {
                        TRD.stop();
                        TRD = null;
                    }
                    if (dialog != null) {
                        dialog.dispose();
                        dialog = null;
                    }
                }
            }

        }

    }

}
